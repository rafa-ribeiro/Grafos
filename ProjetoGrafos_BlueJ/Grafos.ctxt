#BlueJ class context
comment0.params=n
comment0.target=void\ criarGrafo(int)
comment0.text=\n\ Cria\ um\ grafo\ totalmente\ desconexo\ com\ n\ v\uFFFDrtices\n\ \n
comment1.params=n
comment1.target=void\ criarCompleto(int)
comment1.text=\n\ Cria\ um\ grafo\ totalmente\ completo\ com\ n\ v\uFFFDrtices\n
comment10.params=marca
comment10.target=void\ inicializarMarcaAresta(int)
comment10.text=\n\ Marca\ todas\ as\ arestas\ do\ grafo\ com\ o\ valor\ de\ marca.\n
comment11.params=a\ b\ marca
comment11.target=void\ marcarAresta(int,\ int,\ int)
comment11.text=\n\ Marca\ a\ aresta\ (a,b)\ de\ um\ grafo\ simples,\ com\ o\ valor\ de\ marca.\n
comment12.params=a\ b
comment12.target=int\ obterMarcaAresta(int,\ int)
comment12.text=\n\ Devolve\ o\ valor\ da\ marca\ da\ aresta\ (a,b).\n
comment13.params=a\ b
comment13.target=boolean\ existirAresta(int,\ int)
comment13.text=\n\ Verifica\ se\ existe\ a\ aresta\ (a,b).\ Se\ existir\ devolve\ TRUE,\ caso\ contr\uFFFDrio,\ devolve\ FALSE.\n
comment2.params=
comment2.target=int\ obterNumVertices()
comment2.text=\n\ Devolve\ o\ n\uFFFDmero\ de\ v\uFFFDrtices\ de\ um\ grafo\ Simples\n
comment3.params=
comment3.target=int\ obterNumArestas()
comment3.text=\n\ Devolve\ o\ n\uFFFDmero\ de\ arestas\ do\ grafo\n
comment4.params=
comment4.target=void\ acrescentarVertice()
comment4.text=\n\ Acrescenta\ um\ v\uFFFDrtice\ ao\ grafo.\n
comment5.params=a\ b
comment5.target=void\ inserirAresta(int,\ int)
comment5.text=\n\ Acrescenta\ a\ aresta\ (a,b)\ a\ um\ grafo\ simples.\n
comment6.params=a\ b
comment6.target=void\ removerAresta(int,\ int)
comment6.text=\n\ Remove\ a\ aresta\ (a,b)\ de\ um\ grafo\ simples\n
comment7.params=v
comment7.target=int\ obterGrau(int)
comment7.text=\n\ Devolve\ o\ grau\ do\ v\uFFFDrtice\ v.\n
comment8.params=v
comment8.target=int\ obterPrimeiroAdj(int)
comment8.text=\n\ Devolve\ o\ primeiro\ v\uFFFDrtice\ adjacente\ ao\ v\uFFFDrtice\ v.\ Devolve\ o\ valor\ -1\ caso\ grau\ de\ v\ seja\ zero.\n\ \n
comment9.params=v
comment9.target=int\ obterProximoAdj(int)
comment9.text=\n\ Devolve\ o\ pr\uFFFDximo\ v\uFFFDrtice\ adjacente\ ao\ v\uFFFDrtice\ v.\ Devolve\ o\ valor\ -1\ se\ n\uFFFDo\ existir\ um\ proximo.\n
numComments=14
